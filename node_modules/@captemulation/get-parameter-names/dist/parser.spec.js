"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = __importDefault(require("."));
const chai_1 = __importDefault(require("chai"));
const { expect } = chai_1.default;
describe('function tests', function () {
    it('test1', function () {
        function test1(a, b, c) {
            return true;
        }
        expect(_1.default(test1)).to.deep.equal(['a', 'b', 'c']);
    });
    it('test2', function () {
        function test2(a, b, c) {
            return true;
        }
        expect(_1.default(test2)).to.deep.equal(['a', 'b', 'c']);
    });
    it('test3', function () {
        function test3(a, /* (jewiofewjf,wo, ewoi, werp)*/ b, c) {
            return true;
        }
        expect(_1.default(test3)).to.deep.equal(['a', 'b', 'c']);
    });
    it('test4', function () {
        function test4(a /* a*/, /* b */ b, /*c*/ c, d /*d*/) {
            return function (one, two, three) {
            };
        }
        expect(_1.default(test4)).to.deep.equal(['a', 'b', 'c', 'd']);
    });
    it('test5', function () {
        function test5(a, b, c) {
            return false;
        }
        expect(_1.default(test5)).to.deep.equal(['a', 'b', 'c']);
    });
    it('test6', function () {
        function test6(a) { return function f6(a, b) { }; }
        expect(_1.default(test6)).to.deep.equal(['a']);
    });
    it('test7', function () {
        function test7(
        /*
         function test5(
           a,
           b,
           c
         ) {
           return false;
         }
         function test5(
           a,
           b,
           c
         ) {
           return false;
         }
         function test5(
           a,
           b,
           c
         ) {
           return false;
         }
         */
        a, b, c) { return true; }
        expect(_1.default(test7)).to.deep.equal(['a', 'b', 'c']);
    });
    it('test8', function () {
        function test8(a, b, c) { }
        expect(_1.default(test8)).to.deep.equal(['a', 'b', 'c']);
    });
    it('test9', function () {
        function π9(ƒ, µ) { }
        expect(_1.default(π9)).to.deep.equal(['ƒ', 'µ']);
    });
    it('test10', function () {
        function test9() { }
        expect(_1.default(test9)).to.deep.equal([]);
    });
    it('supports ES2015 fat arrow functions with parens', function () {
        var f = '(a,b) => a + b';
        expect(_1.default(f)).to.deep.equal(['a', 'b']);
    });
    it('supports ES2015 fat arrow functions without parens', function () {
        var f = 'a => a + 2';
        expect(_1.default(f)).to.deep.equal(['a']);
    });
    it('supports ES2015 fat arrow functions without parens and new line no parens fat arrow function', function () {
        var f = 'a => a.map(\n b => b)';
        expect(_1.default(f)).to.deep.equal(['a']);
    });
    it('supports ES2015 fat arrow function without parens test1.', function () {
        var f = 'c => {\n'
            + '  var test2 = c.resolve();\n'
            + '  return new Test3(test2);\n'
            + '}';
        expect(_1.default(f)).to.deep.equal(['c']);
    });
    it('supports ES2015 fat arrow function without parens test2.', function () {
        var f = 'a => {\n'
            + '  return new Promise((resolve, reject) => {\n'
            + '    setTimeout(() => resolve(a * 2), 500);\n'
            + '  })'
            + '}';
        expect(_1.default(f)).to.deep.equal(['a']);
    });
    it('supports ES2015 fat arrow function without parens test3.', function () {
        var f = 'items => items.map(\n'
            + '  i => t.foo)';
        expect(_1.default(f)).to.deep.equal(['items']);
    });
    it('supports ES2015 fat arrow function without arguments.', function () {
        var f = '() => 1';
        expect(_1.default(f)).to.deep.equal([]);
    });
    it('ignores ES2015 default params', function () {
        // default params supported in node.js ES6
        var f11 = '(a, b = 20) => a + b';
        expect(_1.default(f11)).to.deep.equal(['a', 'b']);
    });
    it('supports function created using the Function constructor', function () {
        var f = new Function('a', 'b', 'return a + b');
        expect(_1.default(f)).to.deep.equal(['a', 'b']);
    });
    it('supports ES2015 default params with fat arrow function with multiple arguments', function () {
        var f = '( a = 1 , b=2, c = (err, data)=>{}) => {}';
        expect(_1.default(f)).to.deep.equal(['a', 'b', 'c']);
    });
    it('ES2015 default params with fat arrow function in middle', function () {
        var f = '( a = 1 , b= (err, data)=>{}, c = 3) => {}';
        expect(_1.default(f)).to.deep.equal(['a', 'b', 'c']);
    });
    it('ES2015 default params with var re-assignment to an argument like value', function () {
        var f = 'function f(id = 1){ id = \'a,b\'; }';
        expect(_1.default(f)).to.deep.equal(['id']);
    });
    it('ignores ES2016 async keyword test 1', function () {
        var f = 'async (a, b) => a + b';
        expect(_1.default(f)).to.deep.equal(['a', 'b']);
    });
    it('ignores ES2016 async keyword test 2', function () {
        var f = 'async a => a';
        expect(_1.default(f)).to.deep.equal(['a']);
    });
    it('ignores ES2016 async keyword test 3', function () {
        var f = 'async(a) => a';
        expect(_1.default(f)).to.deep.equal(['a']);
    });
    it('ignores ES2016 async keyword test 4', function () {
        var f = 'async function(async, b) { return a + b }';
        expect(_1.default(f)).to.deep.equal(['async', 'b']);
    });
    it('ignores ES2016 async keyword test 5', function () {
        var f = 'async function myfunc(async, b) { return a + b }';
        expect(_1.default(f)).to.deep.equal(['async', 'b']);
    });
    it('ignores ES2016 async keyword test 6', function () {
        var f = 'function async(async, b) { return a + b }';
        expect(_1.default(f)).to.deep.equal(['async', 'b']);
    });
    it('ignores ES2016 async keyword test 7', function () {
        var f = '(async) => 33';
        expect(_1.default(f)).to.deep.equal(['async']);
    });
    it('ignores ES2016 async keyword test 8', function () {
        var f = 'async => 33';
        expect(_1.default(f)).to.deep.equal(['async']);
    });
    describe('ES2016 Class', () => {
        it('constructor with static get before constructor', function () {
            var f = 'class Cat {\n      static get foo () {\n  ' +
                'return [];\n      }\n      static get bar () {\n' +
                'return [];\n      }\n      constructor(a, b){}\n    }';
            expect(_1.default(f)).to.deep.equal(['a', 'b']);
        });
        it('static get before constructor', function () {
            class Cat {
                static get fido() {
                    return 'fido';
                }
                constructor() { }
            }
            expect(_1.default(Cat)).to.deep.equal([]);
        });
        it('class with empty constructor', function () {
            class Cat {
                constructor() { }
            }
            expect(_1.default(Cat)).to.deep.equal([]);
        });
        it('class with static get after constructor', function () {
            class Cat {
                constructor(a, b) { }
                static get fido() {
                    return 'fido';
                }
            }
            expect(_1.default(Cat)).to.deep.equal(['a', 'b']);
        });
        it('class constructor with inheritance', function () {
            class Animal {
                constructor() { }
            }
            class Cat extends Animal {
                constructor(a, b) {
                    super();
                    expect(_1.default(this.constructor)).to.deep.equal(['a', 'b']);
                }
            }
            expect(_1.default(Cat)).to.deep.equal(['a', 'b']);
        });
    });
});
